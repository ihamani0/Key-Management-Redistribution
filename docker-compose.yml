# 1) Définition du réseau Docker avec un sous‐réseau statique
networks:
  iot-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

services:
  # -----------------------------------------------------------------------
  # 2) Service Mosquitto (broker MQTT)
  # -----------------------------------------------------------------------

  mqtt-broker:
    image: eclipse-mosquitto:latest
    container_name: mqtt-broker
    restart: unless-stopped
    networks:
      iot-net:
        ipv4_address: 172.28.0.10
    ports:
      - "1883:1883"
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
  # -----------------------------------------------------------------------
  # 3) Service Gateway (votre application Node.js)
  # -----------------------------------------------------------------------
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    image: gateway-dev
    container_name: gateway-dev
    restart: on-failure
    environment:
      - MQTT_BROKER_URL=mqtt://mqtt-broker:1883
    volumes:
      # 1) Mount your entire project into /usr/src/app so changes on host
      #    are reflected immediately in the container
      - ./gateway:/usr/src/app

      # 2) Preserve container-installed node_modules (so your host's empty
      #    node_modules folder doesn't overwrite them)
      - /usr/src/app/node_modules

    # Run your init script, then start the gateway
    command: sh -c "npm run boot && npm start"

    networks:
      - iot-net
    depends_on:
      - mqtt-broker
    # -----------------------------------------------------------------------
  # 4) Service IoT Device (Python MQTT Subscriber)
  # -----------------------------------------------------------------------
  device-01:
    build:
      context: ./device
      dockerfile: Dockerfile
    image: device-dev
    container_name: device-01
    restart: on-failure
    environment:
      - MQTT_BROKER_URL=mqtt-broker
      - DEVICE_GUID=LR01_device@01 # Must match database registration
      - SUBSET_IDENTIFIER=LR01 # Subset identifier  subsetIdentifier
      - PYTHONUNBUFFERED=1
    volumes:
      - ./device:/usr/src/device # Mount device code
    working_dir: /usr/src/device
    command: sh -c "python device_main.py"
    depends_on:
      - gateway
    networks:
      - iot-net

  device-02:
    build:
      context: ./device
      dockerfile: Dockerfile
    image: device-dev
    container_name: device-02
    restart: on-failure
    environment:
      - MQTT_BROKER_URL=mqtt-broker
      - DEVICE_GUID=LR01_device@02 # Must match database registration
      - SUBSET_IDENTIFIER=LR01 # Subset identifier  subsetIdentifier
      - PYTHONUNBUFFERED=1
    volumes:
      - ./device:/usr/src/device # Mount device code
    working_dir: /usr/src/device
    command: sh -c "python device_main.py"
    depends_on:
      - gateway
    networks:
      - iot-net

  # device-03:
  #   build:
  #     context: ./device
  #     dockerfile: Dockerfile
  #   image: device-dev
  #   container_name: device-03
  #   restart: on-failure
  #   environment:
  #     - MQTT_BROKER_URL=mqtt-broker
  #     - DEVICE_GUID=LR01_device@03 # Must match database registration
  #     - SUBSET_IDENTIFIER=LR01 # Subset identifier  subsetIdentifier
  #     - PYTHONUNBUFFERED=1
  #   volumes:
  #     - ./device:/usr/src/device # Mount device code
  #   working_dir: /usr/src/device
  #   command: sh -c "python device_main.py"
  #   depends_on:
  #     - mqtt-broker
  #   networks:
  #     - iot-net
